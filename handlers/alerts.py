import asyncio
from email.message import Message

from aiogram import Router, types
from aiogram.filters import Command
from services.alerts import add_alert, alert_checker
from services.coingecko import get_price
from services.db import get_all_alerts, get_user_alerts

router = Router()


@router.message(Command('alert'))
async def cmd_alert(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert <coin_id> <target_price>")
        return

    coin_id = args[1].lower()
    try:
        target_price = float(args[2])
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    price, _ = await get_price(coin_id)
    if price is None:
        await message.answer("–¢–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ CoinGecko –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ.")
        return

    await add_alert(message.chat.id, coin_id, target_price)
    await message.answer(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {coin_id.upper()} –ø—Ä–∏ —Ü–µ–Ω–µ {target_price}$")


@router.message(Command("alerts_all"))
async def cmd_alerts_all(message: types.Message):
    alerts = await get_user_alerts(message.chat.id)
    if not alerts:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
        return

    text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:\n\n"
    for alert in alerts:
        coin_id, price = alert
        text += f"ü™ô {coin_id.upper()} ‚Äî {price}$\n"
    await message.answer(text)
